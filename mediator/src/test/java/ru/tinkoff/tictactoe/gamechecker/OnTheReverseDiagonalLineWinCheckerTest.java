package ru.tinkoff.tictactoe.gamechecker;

import org.assertj.core.api.InstanceOfAssertFactories;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import ru.tinkoff.tictactoe.session.Figure;

import java.util.stream.Stream;

import static org.assertj.core.api.Assertions.assertThat;

class OnTheReverseDiagonalLineWinCheckerTest {
    private final OnTheReverseDiagonalLineWinChecker checker = new OnTheReverseDiagonalLineWinChecker();

    @Test
    void givenWinningGameFieldForCross_whenCheck_thenReturnCorrectWinCheckerResults() {
        String gameField = "" +
                "___________________" +
                "______________o____" +
                "______________o____" +
                "______________o____" +
                "______________o____" +
                "___________________" +
                "___________________" +
                "_______x___________" +
                "______x____________" +
                "_____x_____________" +
                "____x______ooo_____" +
                "___x_______________" +
                "_________xxx_______" +
                "___________________" +
                "___________________" +
                "___________________" +
                "_____o_______x_____" +
                "___________________" +
                "___________________";
        String expectGameField = "" +
                "___________________" +
                "______________o____" +
                "______________o____" +
                "______________o____" +
                "______________o____" +
                "___________________" +
                "___________________" +
                "_______X___________" +
                "______X____________" +
                "_____X_____________" +
                "____X______ooo_____" +
                "___X_______________" +
                "_________xxx_______" +
                "___________________" +
                "___________________" +
                "___________________" +
                "_____o_______x_____" +
                "___________________" +
                "___________________";
        Figure figure = Figure.CROSS;
        WinCheckerResults results = checker.check(gameField, figure);
        final var assertion = assertThat(results)
            .asInstanceOf(InstanceOfAssertFactories.type(GameWinResult.class));
        assertion
            .extracting(GameWinResult::win)
            .isEqualTo(true);
        assertion
            .extracting(GameWinResult::newGameField)
            .isEqualTo(expectGameField);
    }

    @Test
    void givenWinningGameFieldForZero_whenCheck_thenReturnCorrectWinCheckerResults() {
        String gameField = "" +
                "___________________" +
                "______________o____" +
                "______________o____" +
                "______________o____" +
                "______________o____" +
                "___________________" +
                "___________________" +
                "_______o___________" +
                "______o____________" +
                "_____o_____________" +
                "____o______ooo_____" +
                "___o_______________" +
                "_________xxx_______" +
                "___________________" +
                "___________________" +
                "___________________" +
                "_____o_______x_____" +
                "___________________" +
                "___________________";
        String expectGameField = "" +
                "___________________" +
                "______________o____" +
                "______________o____" +
                "______________o____" +
                "______________o____" +
                "___________________" +
                "___________________" +
                "_______O___________" +
                "______O____________" +
                "_____O_____________" +
                "____O______ooo_____" +
                "___O_______________" +
                "_________xxx_______" +
                "___________________" +
                "___________________" +
                "___________________" +
                "_____o_______x_____" +
                "___________________" +
                "___________________";
        Figure figure = Figure.ZERO;
        WinCheckerResults results = checker.check(gameField, figure);
        final var assertion = assertThat(results)
            .asInstanceOf(InstanceOfAssertFactories.type(GameWinResult.class));
        assertion
            .extracting(GameWinResult::win)
            .isEqualTo(true);
        assertion
            .extracting(GameWinResult::newGameField)
            .isEqualTo(expectGameField);
    }

    private static Stream<Arguments> argsForIsWinFalse() {
        return Stream.of(
                Arguments.of("" +
                                "___ooooo___________" +
                                "______________x____" +
                                "______________x____" +
                                "______________x____" +
                                "_________x____x____" +
                                "______o___x___x____" +
                                "_______o___x_______" +
                                "________o___x______" +
                                "_________o___x_____" +
                                "__________o________" +
                                "______________o____" +
                                "_______o______o____" +
                                "______o_______o____" +
                                "_____o________o____" +
                                "____o_________o___x" +
                                "_________________x_" +
                                "________________x__" +
                                "_______________x___" +
                                "_____xxxxx____x____"
                        ,
                        Figure.ZERO),
                Arguments.of("" +
                                "___ooooo___________" +
                                "______________x____" +
                                "______________x____" +
                                "______________x____" +
                                "_________x____x____" +
                                "______o___x___x____" +
                                "_______o___x_______" +
                                "________o___x______" +
                                "_________o___x_____" +
                                "__________o________" +
                                "________o_____o____" +
                                "_______o______o____" +
                                "______o_______o____" +
                                "_____o________o____" +
                                "____o_________o___x" +
                                "_________________x_" +
                                "________________x__" +
                                "_______________x___" +
                                "_____xxxxx_________"
                        ,
                        Figure.CROSS)
        );
    }

    @ParameterizedTest
    @MethodSource("argsForIsWinFalse")
    void givenLosingGameField_whenCheck_thenReturnIsWinFalse(String gameField, Figure figure) {
        WinCheckerResults results = checker.check(gameField, figure);
        assertThat(results.win()).isFalse();
    }

    private static Stream<Arguments> argsForIsWinTrue() {
        return Stream.of(
                Arguments.of("" +
                                "___ooooo___________" +
                                "______________x____" +
                                "______________x____" +
                                "______________x____" +
                                "_________x____x____" +
                                "______o___x___x____" +
                                "_______o___x_______" +
                                "________o___x______" +
                                "_________o___x_____" +
                                "__________o________" +
                                "______________o____" +
                                "_______o______o____" +
                                "______o_______o____" +
                                "_____o________o____" +
                                "____o_________o___x" +
                                "___o_____________x_" +
                                "________________x__" +
                                "_______________x___" +
                                "_____xxxxx____x____"
                        ,
                        Figure.ZERO),
                Arguments.of("" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "__________________o" +
                                "_________________o_" +
                                "________________o__" +
                                "_______________o___" +
                                "______________o____"
                        ,
                        Figure.ZERO),
                Arguments.of("" +
                                "____o______________" +
                                "___o_______________" +
                                "__o________________" +
                                "_o_________________" +
                                "o__________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________"
                        ,
                        Figure.ZERO),
                Arguments.of("" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "__________o________" +
                                "_________o_________" +
                                "________o__________" +
                                "_______o___________" +
                                "______o____________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________"
                        ,
                        Figure.ZERO),
                Arguments.of("" +
                                "___ooooo___________" +
                                "______________x____" +
                                "______________x____" +
                                "______________x____" +
                                "_________x____x____" +
                                "______o___x___x____" +
                                "_______o___x_______" +
                                "________o___x______" +
                                "_________o___x_____" +
                                "__________o________" +
                                "______________o____" +
                                "_______o______o____" +
                                "______o_______o____" +
                                "_____o________o____" +
                                "____o_________o___x" +
                                "___o_____________x_" +
                                "________________x__" +
                                "_______________x___" +
                                "_____xxxxx____x____"
                        ,
                        Figure.CROSS),
                Arguments.of("" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "__________________x" +
                                "_________________x_" +
                                "________________x__" +
                                "_______________x___" +
                                "______________x____"
                        ,
                        Figure.CROSS),
                Arguments.of("" +
                                "____x______________" +
                                "___x_______________" +
                                "__x________________" +
                                "_x_________________" +
                                "x__________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________"
                        ,
                        Figure.CROSS),
                Arguments.of("" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "__________x________" +
                                "_________x_________" +
                                "________x__________" +
                                "_______x___________" +
                                "______x____________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________" +
                                "___________________"
                        ,
                        Figure.CROSS)
        );
    }

    @ParameterizedTest
    @MethodSource("argsForIsWinTrue")
    void givenLosingGameField_whenCheck_thenReturnIsWinTrue(String gameField, Figure figure) {
        WinCheckerResults results = checker.check(gameField, figure);
        assertThat(results.win()).isTrue();
    }
}