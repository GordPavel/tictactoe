package ru.tinkoff.tictactoe.gamechecker;

import static org.assertj.core.api.Assertions.assertThat;

import java.util.stream.Stream;
import org.assertj.core.api.InstanceOfAssertFactories;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import ru.tinkoff.tictactoe.session.Figure;

class OnTheDiagonalLineWinCheckerTest {

    private final OnTheDiagonalLineWinChecker checker = new OnTheDiagonalLineWinChecker();

    @Test
    void givenWinningGameFieldForCross_whenCheck_thenReturnCorrectWinCheckerResults() {
        String gameField = "" +
            "___________________" +
            "______________o____" +
            "______________o____" +
            "______________o____" +
            "_____x________o____" +
            "______x____________" +
            "_______x___________" +
            "________x__________" +
            "_________x_________" +
            "___________________" +
            "___________ooo_____" +
            "___________________" +
            "_________xxx_______" +
            "___________________" +
            "___________________" +
            "___________________" +
            "_____o_______x_____" +
            "___________________" +
            "___________________";
        String expectGameField = "" +
            "___________________" +
            "______________o____" +
            "______________o____" +
            "______________o____" +
            "_____X________o____" +
            "______X____________" +
            "_______X___________" +
            "________X__________" +
            "_________X_________" +
            "___________________" +
            "___________ooo_____" +
            "___________________" +
            "_________xxx_______" +
            "___________________" +
            "___________________" +
            "___________________" +
            "_____o_______x_____" +
            "___________________" +
            "___________________";
        Figure figure = Figure.CROSS;
        WinCheckerResults results = checker.check(gameField, figure);
        final var assertion = assertThat(results)
            .asInstanceOf(InstanceOfAssertFactories.type(GameWinResult.class));
        assertion
            .extracting(GameWinResult::win)
            .isEqualTo(true);
        assertion
            .extracting(GameWinResult::newGameField)
            .isEqualTo(expectGameField);
    }

    @Test
    void givenWinningGameFieldForZero_whenCheck_thenReturnCorrectWinCheckerResults() {
        String gameField = "" +
            "___________________" +
            "______________o____" +
            "______________o____" +
            "______________o____" +
            "_____o________o____" +
            "______o____________" +
            "_______o___________" +
            "________o__________" +
            "_________o_________" +
            "___________________" +
            "___________ooo_____" +
            "___________________" +
            "_________xxx_______" +
            "___________________" +
            "___________________" +
            "___________________" +
            "_____o_______x_____" +
            "___________________" +
            "___________________";
        String expectGameField = "" +
            "___________________" +
            "______________o____" +
            "______________o____" +
            "______________o____" +
            "_____O________o____" +
            "______O____________" +
            "_______O___________" +
            "________O__________" +
            "_________O_________" +
            "___________________" +
            "___________ooo_____" +
            "___________________" +
            "_________xxx_______" +
            "___________________" +
            "___________________" +
            "___________________" +
            "_____o_______x_____" +
            "___________________" +
            "___________________";
        Figure figure = Figure.ZERO;
        WinCheckerResults results = checker.check(gameField, figure);
        final var assertion = assertThat(results)
            .asInstanceOf(InstanceOfAssertFactories.type(GameWinResult.class));
        assertion
            .extracting(GameWinResult::win)
            .isEqualTo(true);
        assertion
            .extracting(GameWinResult::newGameField)
            .isEqualTo(expectGameField);
    }

    private static Stream<Arguments> argsForIsWinFalse() {
        return Stream.of(
            Arguments.of("" +
                             "___ooooo___________" +
                             "______________x____" +
                             "______________x____" +
                             "______________x____" +
                             "_________x____x____" +
                             "______o___x___x____" +
                             "_______o___x_______" +
                             "________o___x______" +
                             "_________o___x_____" +
                             "___________________" +
                             "________o_____o____" +
                             "_______o______o____" +
                             "______o_______o____" +
                             "_____o________o____" +
                             "____o_________o___x" +
                             "_________________x_" +
                             "________________x__" +
                             "_______________x___" +
                             "_____xxxxx____x____"
                ,
                         Figure.ZERO),
            Arguments.of("" +
                             "___ooooo___________" +
                             "______________x____" +
                             "______________x____" +
                             "______________x____" +
                             "_________x____x____" +
                             "______o___x___x____" +
                             "_______o___x_______" +
                             "________o___x______" +
                             "_________o_________" +
                             "__________o________" +
                             "________o_____o____" +
                             "_______o______o____" +
                             "______o_______o____" +
                             "_____o________o____" +
                             "____o_________o___x" +
                             "_________________x_" +
                             "________________x__" +
                             "_______________x___" +
                             "_____xxxxx____x____"
                ,
                         Figure.CROSS)
        );
    }

    @ParameterizedTest
    @MethodSource("argsForIsWinFalse")
    void givenLosingGameField_whenCheck_thenReturnIsWinFalse(String gameField, Figure figure) {
        WinCheckerResults results = checker.check(gameField, figure);
        assertThat(results.win()).isFalse();
    }

    private static Stream<Arguments> argsForIsWinTrue() {
        return Stream.of(
            Arguments.of("" +
                             "___ooooo___________" +
                             "______________x____" +
                             "______________x____" +
                             "______________x____" +
                             "_________x____x____" +
                             "______o___x___x____" +
                             "_______o___x_______" +
                             "________o___x______" +
                             "_________o___x_____" +
                             "__________o________" +
                             "______________o____" +
                             "_______o______o____" +
                             "______o_______o____" +
                             "_____o________o____" +
                             "____o_________o___x" +
                             "___o_____________x_" +
                             "________________x__" +
                             "_______________x___" +
                             "_____xxxxx____x____"
                ,
                         Figure.ZERO),
            Arguments.of("" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "o__________________" +
                             "_o_________________" +
                             "__o________________" +
                             "___o_______________" +
                             "____o______________"
                ,
                         Figure.ZERO),
            Arguments.of("" +
                             "______________o____" +
                             "_______________o___" +
                             "________________o__" +
                             "_________________o_" +
                             "__________________o" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________"
                ,
                         Figure.ZERO),
            Arguments.of("" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "______________o____" +
                             "_______________o___" +
                             "________________o__" +
                             "_________________o_" +
                             "__________________o"
                ,
                         Figure.ZERO),
            Arguments.of("" +
                             "___ooooo___________" +
                             "______________x____" +
                             "______________x____" +
                             "______________x____" +
                             "_________x____x____" +
                             "______o___x___x____" +
                             "_______o___x_______" +
                             "________o___x______" +
                             "_________o___x_____" +
                             "__________o________" +
                             "______________o____" +
                             "_______o______o____" +
                             "______o_______o____" +
                             "_____o________o____" +
                             "____o_________o___x" +
                             "___o_____________x_" +
                             "________________x__" +
                             "_______________x___" +
                             "_____xxxxx____x____"
                ,
                         Figure.CROSS),
            Arguments.of("" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "x__________________" +
                             "_x_________________" +
                             "__x________________" +
                             "___x_______________" +
                             "____x______________"
                ,
                         Figure.CROSS),
            Arguments.of("" +
                             "______________x____" +
                             "_______________x___" +
                             "________________x__" +
                             "_________________x_" +
                             "__________________x" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________"
                ,
                         Figure.CROSS),
            Arguments.of("" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "___________________" +
                             "______________x____" +
                             "_______________x___" +
                             "________________x__" +
                             "_________________x_" +
                             "__________________x"
                ,
                         Figure.CROSS)
        );
    }

    @ParameterizedTest
    @MethodSource("argsForIsWinTrue")
    void givenLosingGameField_whenCheck_thenReturnIsWinTrue(String gameField, Figure figure) {
        WinCheckerResults results = checker.check(gameField, figure);
        assertThat(results.win()).isTrue();
    }
}